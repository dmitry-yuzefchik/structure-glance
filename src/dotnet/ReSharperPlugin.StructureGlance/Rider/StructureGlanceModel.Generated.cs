//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: StructureGlanceModel.kt:8</p>
  /// </summary>
  public class StructureGlanceModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdEndpoint<RdDocumentId, MemberSignature[]> OpenFile => _OpenFile;
    [NotNull] public ISignal<MemberSignature[]> OpenedFile => _OpenedFile;
    
    //private fields
    [NotNull] private readonly RdCall<RdDocumentId, MemberSignature[]> _OpenFile;
    [NotNull] private readonly RdSignal<MemberSignature[]> _OpenedFile;
    
    //primary constructor
    private StructureGlanceModel(
      [NotNull] RdCall<RdDocumentId, MemberSignature[]> openFile,
      [NotNull] RdSignal<MemberSignature[]> openedFile
    )
    {
      if (openFile == null) throw new ArgumentNullException("openFile");
      if (openedFile == null) throw new ArgumentNullException("openedFile");
      
      _OpenFile = openFile;
      _OpenedFile = openedFile;
      BindableChildren.Add(new KeyValuePair<string, object>("openFile", _OpenFile));
      BindableChildren.Add(new KeyValuePair<string, object>("openedFile", _OpenedFile));
    }
    //secondary constructor
    internal StructureGlanceModel (
    ) : this (
      new RdCall<RdDocumentId, MemberSignature[]>(RdDocumentId.Read, RdDocumentId.Write, ReadMemberSignatureArray, WriteMemberSignatureArray),
      new RdSignal<MemberSignature[]>(ReadMemberSignatureArray, WriteMemberSignatureArray)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<MemberSignature[]> ReadMemberSignatureArray = MemberSignature.Read.Array();
    
    public static  CtxWriteDelegate<MemberSignature[]> WriteMemberSignatureArray = MemberSignature.Write.Array();
    
    protected override long SerializationHash => 1992074248282018964L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(IdeRoot), IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("StructureGlanceModel (");
      using (printer.IndentCookie()) {
        printer.Print("openFile = "); _OpenFile.PrintEx(printer); printer.Println();
        printer.Print("openedFile = "); _OpenedFile.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionStructureGlanceModelEx
   {
    public static StructureGlanceModel GetStructureGlanceModel(this Solution solution)
    {
      return solution.GetOrCreateExtension("structureGlanceModel", () => new StructureGlanceModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: StructureGlanceModel.kt:10</p>
  /// </summary>
  public sealed class MemberSignature : IPrintable, IEquatable<MemberSignature>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    public SignatureType Type {get; private set;}
    
    //private fields
    //primary constructor
    public MemberSignature(
      [NotNull] string name,
      SignatureType type
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
      Type = type;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, out SignatureType type)
    {
      name = Name;
      type = Type;
    }
    //statics
    
    public static CtxReadDelegate<MemberSignature> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var type = (SignatureType)reader.ReadInt();
      var _result = new MemberSignature(name, type);
      return _result;
    };
    
    public static CtxWriteDelegate<MemberSignature> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write((int)value.Type);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MemberSignature) obj);
    }
    public bool Equals(MemberSignature other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Type == other.Type;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (int) Type;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MemberSignature (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: StructureGlanceModel.kt:15</p>
  /// </summary>
  public enum SignatureType {
    Class,
    Method,
    Field,
    Property,
    Constructor
  }
}
